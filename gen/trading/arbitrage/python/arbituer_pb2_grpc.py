# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import arbituer_pb2 as arbituer__pb2


class ArbitrageServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Initialize = channel.unary_unary(
        '/trading.arbitrage.ArbitrageService/Initialize',
        request_serializer=arbituer__pb2.InitializeRequest.SerializeToString,
        response_deserializer=arbituer__pb2.InitializeResponse.FromString,
        )
    self.HandleData = channel.unary_unary(
        '/trading.arbitrage.ArbitrageService/HandleData',
        request_serializer=arbituer__pb2.HandleDataRequest.SerializeToString,
        response_deserializer=arbituer__pb2.HandleDataResponse.FromString,
        )
    self.Analysis = channel.unary_unary(
        '/trading.arbitrage.ArbitrageService/Analysis',
        request_serializer=arbituer__pb2.AnalysisRequest.SerializeToString,
        response_deserializer=arbituer__pb2.AnalysisResponse.FromString,
        )


class ArbitrageServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Initialize(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def HandleData(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Analysis(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ArbitrageServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Initialize': grpc.unary_unary_rpc_method_handler(
          servicer.Initialize,
          request_deserializer=arbituer__pb2.InitializeRequest.FromString,
          response_serializer=arbituer__pb2.InitializeResponse.SerializeToString,
      ),
      'HandleData': grpc.unary_unary_rpc_method_handler(
          servicer.HandleData,
          request_deserializer=arbituer__pb2.HandleDataRequest.FromString,
          response_serializer=arbituer__pb2.HandleDataResponse.SerializeToString,
      ),
      'Analysis': grpc.unary_unary_rpc_method_handler(
          servicer.Analysis,
          request_deserializer=arbituer__pb2.AnalysisRequest.FromString,
          response_serializer=arbituer__pb2.AnalysisResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'trading.arbitrage.ArbitrageService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
